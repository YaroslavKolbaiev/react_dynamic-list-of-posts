{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","api/posts.ts","api/comments.ts","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","posts","postId","setPostId","fetchComments","setShowForm","className","map","post","id","title","type","onClick","Loader","NewCommentForm","addComment","useState","author","setAuthor","email","setEmail","commentText","setCommentText","spinner","setSpinner","authorError","setAuthorError","emailError","setEmailError","commentTextError","setCommentTextError","hasError","onSubmit","event","preventDefault","htmlFor","name","placeholder","classNames","value","onChange","target","PostDetails","selectedPost","comments","loadingComment","showComments","dropErrorComments","removeComment","showForm","body","length","comment","href","UserSelector","showUsers","setShowUsers","users","selectedUser","setSelectedUser","fetchPosts","role","user","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","fetch","then","response","ok","Error","json","client","getPosts","userId","getComments","deleteComment","commentId","createComment","App","setUsers","setUserId","setPosts","loading","setLoading","setLoadingComment","dropError","setDropError","showPosts","setShowPosts","setComments","setShowComments","setDropErrorComments","useCallback","selectedId","a","postsFromServer","selectedPostId","commentsFromServer","prev","filter","x","newCommnet","useEffect","fetchUsers","usersFromServer","useMemo","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db4c5aee.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[]\n  // setShowPostsDetails: (value: boolean) => void\n  // showPostsDetails: boolean\n  postId: number\n  setPostId: (value: number) => void\n  fetchComments: (value: number) => void\n  setShowForm: (value: boolean) => void\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  // setShowPostsDetails,\n  // showPostsDetails,\n  postId,\n  setPostId,\n  fetchComments,\n  setShowForm,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n\n          {posts.map(post => (\n            <tr\n              data-cy=\"Post\"\n              key={post.id}\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                {postId === post.id\n                  ? (\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link\"\n                      onClick={() => {\n                        // setShowPostsDetails(!showPostsDetails);\n                        setPostId(0);\n                        setShowForm(false);\n                      }}\n                    >\n                      Close\n                    </button>\n                  )\n                  : (\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link is-light\"\n                      onClick={() => {\n                        // setShowPostsDetails(!showPostsDetails);\n                        setPostId(post.id);\n                        fetchComments(post.id);\n                        setShowForm(false);\n                      }}\n                    >\n                      Open\n                    </button>\n                  )}\n              </td>\n            </tr>\n          ))}\n\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  addComment: (\n    name: string,\n    email: string,\n    body: string,\n    setSpinner: React.Dispatch<React.SetStateAction<boolean>>,\n  ) => void\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ addComment }) => {\n  const [author, setAuthor] = useState('');\n  const [email, setEmail] = useState('');\n  const [commentText, setCommentText] = useState('');\n  const [spinner, setSpinner] = useState(false);\n  const [authorError, setAuthorError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [commentTextError, setCommentTextError] = useState(false);\n\n  const hasError = !author || !email || !commentText;\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        if (hasError) {\n          setAuthorError(author === '');\n          setEmailError(email === '');\n          setCommentTextError(commentText === '');\n\n          return;\n        }\n\n        addComment(author, email, commentText, setSpinner);\n        setCommentText('');\n      }}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            // className=\"input is-danger\"\n            className={classNames('input', {\n              'input is-danger': authorError,\n            })}\n            value={author}\n            onChange={(event) => {\n              setAuthor(event.target.value);\n              setAuthorError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {authorError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {authorError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'input is-danger': emailError,\n            })}\n            value={email}\n            onChange={(event) => {\n              setEmail(event.target.value);\n              setEmailError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'textarea is-danger': commentTextError,\n            })}\n            value={commentText}\n            onChange={(event) => {\n              setCommentText(event.target.value);\n              setCommentTextError(false);\n            }}\n          />\n        </div>\n\n        {commentTextError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            // className=\"button is-link\"\n            className={classNames(\n              'button is-link', {\n                'button is-link is-loading': spinner,\n              },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => {\n              setAuthor('');\n              setEmail('');\n              setCommentText('');\n              setAuthorError(false);\n              setEmailError(false);\n              setCommentTextError(false);\n            }}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  selectedPost: Post | undefined\n  comments: Comment[]\n  loadingComment: boolean\n  showComments: boolean\n  dropErrorComments: boolean\n  removeComment: (value: number) => void\n  setShowForm: (value: boolean) => void\n  showForm: boolean\n  addComment: (\n    name: string,\n    email: string,\n    body: string,\n    setSpinner: (React.Dispatch<React.SetStateAction<boolean>>),\n  ) => void\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  comments,\n  loadingComment,\n  showComments,\n  dropErrorComments,\n  removeComment,\n  setShowForm,\n  showForm,\n  addComment,\n}) => {\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            #\n            {selectedPost?.id}\n            {': '}\n            {selectedPost?.title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        {loadingComment && <Loader /> }\n        {dropErrorComments && (\n          <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            Something went wrong\n          </div>\n        )}\n\n        {\n          showComments && (\n            <div className=\"block\">\n              {comments.length === 0 ? (\n                <>\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    No Comments yet\n                  </p>\n                </>\n              ) : (\n                <>\n                  <p className=\"title is-4\">Comments:</p>\n                  {comments.map(comment => (\n                    <article className=\"message is-small\" data-cy=\"Comment\">\n                      <div className=\"message-header\">\n                        <a\n                          href={comment.email}\n                          data-cy=\"CommentAuthor\"\n                        >\n                          {comment.name}\n                        </a>\n                        <button\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                          onClick={() => {\n                            removeComment(comment.id);\n                          }}\n                        >\n                          delete button\n                        </button>\n                      </div>\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {comment.body}\n                      </div>\n                    </article>\n\n                  ))}\n                </>\n              )}\n              {!showForm ? (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => {\n                    setShowForm(true);\n                  }}\n                >\n                  Write a comment\n                </button>\n              ) : (\n                <NewCommentForm addComment={addComment} />\n              )}\n            </div>\n          )\n        }\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[]\n  showUsers: boolean\n  setShowUsers: (value: boolean) => void\n  selectedUser: number\n  setSelectedUser: (value: number) => void\n  fetchPosts: (value: number) => void\n  setPostId: (value: number) => void\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  showUsers,\n  setShowUsers,\n  users,\n  selectedUser,\n  setSelectedUser,\n  fetchPosts,\n  setPostId,\n}) => {\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setShowUsers(!showUsers);\n          }}\n        >\n          {selectedUser === 0\n            ? (<span>Choose a user</span>)\n            : (<span>{users[selectedUser - 1].name}</span>)}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {showUsers && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <>\n                {\n                  selectedUser === user.id\n                    ? (\n                      <a\n                        key={user.id}\n                        href={`#user-${user.id}`}\n                        className=\"dropdown-item is-active\"\n                        onClick={() => {\n                          setShowUsers(!showUsers);\n                        }}\n                      >\n                        {user.name}\n                      </a>\n\n                    )\n\n                    : (\n                      <a\n                        key={user.id}\n                        href={`#user-${user.id}`}\n                        className=\"dropdown-item\"\n                        onClick={() => {\n                          setSelectedUser(user.id);\n                          setPostId(0);\n                          fetchPosts(user.id);\n                          setShowUsers(!showUsers);\n                        }}\n                      >\n                        {user.name}\n                      </a>\n                    )\n                }\n              </>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return method === 'DELETE' ? fetch(BASE_URL + url, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    }) : wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getComments = (postId: number | undefined) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const createComment = (\n  postId: number | undefined,\n  name: string,\n  email: string,\n  body: string,\n) => {\n  return client.post<Comment>('/comments/', {\n    postId,\n    name,\n    email,\n    body,\n  });\n};\n","import React, {\n  useState,\n  useEffect,\n  useCallback,\n  useMemo,\n} from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\n\nimport { User } from './types/User';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\nimport { getComments, deleteComment, createComment } from './api/comments';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [showUsers, setShowUsers] = useState(false);\n  const [users, setUsers] = useState<User[]>([]);\n  const [userId, setUserId] = useState(0);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [postId, setPostId] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [loadingComment, setLoadingComment] = useState(false);\n  const [dropError, setDropError] = useState(false);\n  const [showPosts, setShowPosts] = useState(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [showComments, setShowComments] = useState(false);\n  const [dropErrorComments, setDropErrorComments] = useState(false);\n  const [showForm, setShowForm] = useState(false);\n  // const [showPostsDetails, setShowPostsDetails] = useState(false);\n\n  const fetchPosts = useCallback(async (selectedId: number) => {\n    setShowPosts(false);\n    setLoading(true);\n    setDropError(false);\n    try {\n      const postsFromServer = await getPosts(selectedId);\n\n      setPosts(postsFromServer);\n      setLoading(false);\n      setShowPosts(true);\n    } catch (error) {\n      setLoading(false);\n      setDropError(true);\n    }\n  }, []);\n\n  const fetchComments = useCallback(async (selectedPostId: number) => {\n    setShowComments(false);\n    setLoadingComment(true);\n    setDropErrorComments(false);\n\n    try {\n      const commentsFromServer = await getComments(selectedPostId);\n\n      setComments(commentsFromServer);\n      setLoadingComment(false);\n      setShowComments(true);\n    } catch (error) {\n      setLoadingComment(false);\n      setDropErrorComments(true);\n    }\n  }, []);\n\n  const removeComment = useCallback(async (commentId: number) => {\n    try {\n      await deleteComment(commentId);\n      setComments(prev => prev.filter((x) => x.id !== commentId));\n    } catch (error) {\n      setShowComments(false);\n      setDropErrorComments(true);\n    }\n  }, []);\n\n  const addComment = useCallback(async (\n    name: string,\n    email: string,\n    body: string,\n    setSpinner: (React.Dispatch<React.SetStateAction<boolean>>),\n  ) => {\n    setSpinner(true);\n\n    try {\n      const newCommnet = await createComment(postId, name, email, body);\n\n      setComments((prev) => {\n        return [...prev, newCommnet];\n      });\n      setSpinner(false);\n    } catch (error) {\n      setSpinner(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    };\n\n    fetchUsers();\n  }, []);\n\n  const selectedPost = useMemo(() => {\n    return posts.find(post => post.id === postId);\n  }, [posts, postId]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  showUsers={showUsers}\n                  setShowUsers={setShowUsers}\n                  selectedUser={userId}\n                  setSelectedUser={setUserId}\n                  fetchPosts={fetchPosts}\n                  setPostId={setPostId}\n                />\n              </div>\n\n              {dropError && (\n                <div\n                  className=\"notification is-danger\"\n                  data-cy=\"PostsLoadingError\"\n                >\n                  Something went wrong!\n                </div>\n              )}\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {userId === 0 && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {showPosts && (\n                  posts.length === 0 ? (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  ) : (\n                    <PostsList\n                      posts={posts}\n                      // setShowPostsDetails={setShowPostsDetails}\n                      // showPostsDetails={showPostsDetails}\n                      postId={postId}\n                      setPostId={setPostId}\n                      fetchComments={fetchComments}\n                      setShowForm={setShowForm}\n                    />\n                  )\n                )}\n\n                {loading && <Loader />}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar', {\n                'Sidebar--open': postId !== 0,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails\n                selectedPost={selectedPost}\n                comments={comments}\n                loadingComment={loadingComment}\n                showComments={showComments}\n                dropErrorComments={dropErrorComments}\n                removeComment={removeComment}\n                setShowForm={setShowForm}\n                showForm={showForm}\n                addComment={addComment}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}